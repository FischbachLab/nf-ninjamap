includeConfig "$baseDir/conf/aws_batch.config"

manifest {
  name = 'NinjaMap'
  author = 'Xiandong Meng'
  homePage = 'https://github.com/fischbachlab/nf-ninjamap'
  description = 'Calculate strain abundance in a defined community'
  mainScript = 'main.nf'
  version = '0.0.1'
  defaultBranch = 'main' //github branch name
}

process {
  executor = 'awsbatch'
  queue = "default-maf-pipelines"
  cleanup = true
  //container = '423543210473.dkr.ecr.us-west-2.amazonaws.com/fischbach_lab/ninjamap:20210828043637'
  //container = 'fischbachlab/nf-ninjamap:latest'
  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  cache = false

  //cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  //memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  //time = { check_max( 8.h * task.attempt, 'time' ) }
  //maxErrors = '-1'

}

aws {
  region = "us-west-2"
}

//aws.batch.cliPath = '/home/ec2-user/miniconda3/bin/aws'

params{
  /*
 * Defines the pipeline inputs parameters (giving a default value for each for them)
 * Each of the following parameters can be specified as command line options
 */
 /* 	Initialization
  --------------------------------*/
  ref_db_path = "/mnt/efs/databases/Bowtie2"
  db = ""
  db_prefix = ""
  db_path = "s3://maf-versioned/ninjamap/Index"
  // external url: https://zenodo.org/record/7872423/files/hCom2_20221117.ninjaIndex.tar.gz
  output_path = "s3://genomics-workflow-core/Pipeline_Results/Ninjamap/"
  //"s3://genomics-workflow-core/Pipeline_Results/NinjaMap/${params.output_prefix}"
  sampleRate = 1
  coreNum = 8
  memPerCore = "6G"
  coverage = 0
  // QC parameters
  minQuality = 30   
  minLength = 50
  container = '458432034220.dkr.ecr.us-west-2.amazonaws.com/nf-ninjamap:20220729115816'
  //container = 'fischbachlab/nf-ninjamap:latest'
  debug = 0
}

docker {
    enabled = true
}

profiles {
  //awsbatch { includeConfig 'conf/aws_batch.config' }
  //conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  //singularity { singularity.enabled = true }
  //test { includeConfig 'conf/test.config' }
}


timeline {
  enabled = false
  overwrite = true
  file = "$params.output_path/execution_reports/timeline.html"
}

report {
  enabled = false
  overwrite = true
  file = "$params.output_path/execution_reports/report.html"
}

dag {
    enabled = false
    overwrite = true
    file = "$params.output_path/execution_reports/pipeline_dag.html"
}
